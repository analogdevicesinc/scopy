variables:
    QT_FORMULAE: qt@5
    REPO_SLUG: $(Build.Repository.Name)
    CURRENT_COMMIT: $(Build.SourceVersion)

trigger:
  branches:
    include:
    - main
    - master
    - dev
    - ci-*
  tags:
    include:
    - v*

pr:
  branches:
    include:
    - main
    - master
    - dev
    - ci-*

stages:
- stage: Builds
  jobs:
  # Import cache logic from separate file
  - template: azure-pipelines-cache-logic.yml

  - job: macOSBuilds
    dependsOn: PrepareDepencies
    strategy:
      matrix:
        macOS_14:
          vmImage: 'macOS-14'
          artifactName: 'macOS-14'
          depsArtifactName: 'deps-macOS-14'
        macOS_15:
          vmImage: 'macOS-15'
          artifactName: 'macOS-15'
          depsArtifactName: 'deps-macOS-15'

    pool:
      vmImage: $[ variables['vmImage'] ]
    steps:
    - checkout: self
      fetchDepth: 0
      clean: true

    # Download cached dependencies from cache job
    - task: DownloadPipelineArtifact@2
      displayName: 'Download cached dependencies'
      inputs:
        artifactName: '$(depsArtifactName)'
        targetPath: '$(Build.Repository.LocalPath)'

    # Extract dependencies
    - script: |
        set -e
        echo "Extracting dependencies artifact..."
        if [ -f "dependencies-$(vmImage).tar.gz" ]; then
          tar -xzf "dependencies-$(vmImage).tar.gz"
          echo "Dependencies extracted successfully"
          ls -la staging/ || echo "No staging directory"
        else
          echo "Dependencies artifact not found, this may cause build issues"
          exit 1
        fi
      displayName: 'Extract dependencies'
      workingDirectory: $(Build.Repository.LocalPath)

    # Set up Homebrew environment (dependencies already cached)
    - script: |
        echo "Setting up Homebrew environment..."
        export PATH="/usr/local/bin:$PATH"
        export PATH="/usr/local/opt/bison/bin:$PATH"
        QT_PATH="$(brew --prefix qt@5)/bin"
        export PATH="${QT_PATH}:$PATH"
        echo "##vso[task.setvariable variable=PATH]$PATH"

        # Verify cached dependencies
        if [ -d "staging/dependencies" ]; then
          echo "Dependencies found in staging area"
          ls -la staging/dependencies/lib/ | head -10
        else
          echo "Warning: Dependencies not found in expected location"
        fi
      displayName: 'Setup cached environment'
      workingDirectory: $(Build.Repository.LocalPath)

    - script: |
            export BUILD_HOST="$(vmImage)"
            export ACCOUNT_NAME=`echo $REPO_SLUG | awk -F "/" '{print $1}'`
            export PROJECT_NAME=`echo $REPO_SLUG | awk -F "/" '{print $2}'`
            export USERNAME="azure-pipelines"
            export BUILD_REPO_URL=$(Build.Repository.Uri)
            export RUN_ID=$(Build.BuildId)
            export RUN_NUMBER=$(Build.BuildNumber)
            export JOB_ID=$(System.JobId)
            export JOB_NAME=$(System.JobName)
            export RUNNER_ARCH=$(Agent.OSArchitecture)
            export MACOSX_DEPLOYMENT_TARGET=11.0
            ./ci/macOS/build_azure_macos.sh
      displayName: 'Build Scopy'
      workingDirectory: $(Build.Repository.LocalPath)
    - script: ./ci/macOS/package_darwin.sh
      displayName: 'Create Scopy.dmg'
      workingDirectory: $(Build.Repository.LocalPath)
    - script: cp -R staging ${BUILD_ARTIFACTSTAGINGDIRECTORY}
      displayName: 'Copy Staging Dir'
      workingDirectory: $(Build.Repository.LocalPath)
    - script: |
            set -e
            echo "TF_BUILD = ${TF_BUILD}"
            echo "ACCOUNT_NAME = " ${ACCOUNT_NAME}
            echo "PROJECT_NAME = " ${PROJECT_NAME}
            MACOS_VERSION=$(/usr/libexec/PlistBuddy -c "Print:ProductVersion" /System/Library/CoreServices/SystemVersion.plist)
            DEPLOY_FILE=Scopy-macos${MACOS_VERSION}-${CURRENT_COMMIT:0:7}.dmg
            cp build/ScopyApp.zip ${BUILD_ARTIFACTSTAGINGDIRECTORY}
            if [ -e build/Scopy.dmg ]; then
              cp build/Scopy.dmg ${BUILD_ARTIFACTSTAGINGDIRECTORY}/${DEPLOY_FILE}
              cd ${BUILD_ARTIFACTSTAGINGDIRECTORY}
              tar czvf Scopy-macos${MACOS_VERSION}.tar.gz ${DEPLOY_FILE}
            else
              echo "Scopy.dmg does not exists"
            fi
            ls -la ${BUILD_ARTIFACTSTAGINGDIRECTORY}
      displayName: 'Rename and copy artifact'
      workingDirectory: $(Build.Repository.LocalPath)
    - task: GithubRelease@1
      displayName: 'Push to continuous release'
      condition: and(succeeded(), and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
      inputs:
        githubConnection: scopy_continuous_release
        repositoryName: $(Build.Repository.Name)
        action: edit
        tag: continous
        assets: $(Build.ArtifactStagingDirectory)/Scopy*.tar.gz
        assetUploadMode: replace
        isPreRelease: true
        addChangeLog: false
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
