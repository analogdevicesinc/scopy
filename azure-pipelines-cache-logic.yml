jobs:
- job: PrepareDepencies
  displayName: 'Prepare and Cache Dependencies'
  strategy:
    matrix:
      macOS_14:
        vmImage: 'macOS-14'
        artifactName: 'deps-macOS-14'
      macOS_15:
        vmImage: 'macOS-15'
        artifactName: 'deps-macOS-15'

  pool:
    vmImage: $[ variables['vmImage'] ]

  steps:
  - checkout: self
    fetchDepth: 1
    clean: true

  # Cache Homebrew installed packages (Cellar directory)
  - task: Cache@2
    displayName: 'Cache Homebrew packages'
    inputs:
      key: 'homebrew-cellar-v1 | "$(Agent.OS)" | $(vmImage) | ci/macOS/macos_config.sh'
      restoreKeys: |
        homebrew-cellar-v1 | "$(Agent.OS)" | $(vmImage)
      path: /usr/local/Cellar
      cacheHitVar: HOMEBREW_CACHE_RESTORED

  # TODO: Re-enable after Homebrew cache works
  # Cache source-built dependencies
  # - task: Cache@2
  #   displayName: 'Cache source dependencies'
  #   inputs:
  #     key: 'deps-v1 | "$(Agent.OS)" | $(vmImage) | ci/macOS/install_macos_deps.sh | ci/macOS/macos_config.sh'
  #     path: $(STAGING_AREA)
  #     cacheHitVar: DEPS_CACHE_RESTORED

  # Install dependencies with Homebrew package cache optimization
  - script: |
      set -e
      echo "Homebrew package cache status: $HOMEBREW_CACHE_RESTORED"

      # Set environment flags based on cache status
      if [ "$HOMEBREW_CACHE_RESTORED" = "true" ]; then
        echo "Homebrew packages restored from cache"
        export HOMEBREW_PACKAGES_CACHED=true
        export HOMEBREW_NO_AUTO_UPDATE=1  # Skip brew update
      else
        echo "No package cache, will install packages fresh"
        export HOMEBREW_PACKAGES_CACHED=false
      fi

      # Run installation script with cache awareness
      ./ci/macOS/install_macos_deps.sh
    displayName: 'Install and build dependencies'
    workingDirectory: $(Build.Repository.LocalPath)

  # Validate Homebrew packages
  - script: |
      set -e
      echo "=== Homebrew package validation ==="
      echo "Cellar directory contents: $(ls /usr/local/Cellar | wc -l) packages"

      if [ "$HOMEBREW_CACHE_RESTORED" = "true" ]; then
        echo "Package cache was restored"
        echo "Sample cached packages:"
        ls /usr/local/Cellar | head -5
      else
        echo "No package cache, packages installed fresh"
      fi

      echo "=== Post-setup verification ==="
      echo "Qt status: $(brew list --versions qt@5 2>/dev/null || echo 'Not linked')"
      echo "CMake status: $(cmake --version 2>/dev/null | head -1 || echo 'Not available')"
      echo "Total linked packages: $(brew list | wc -l)"
    displayName: 'Validate dependencies'
    workingDirectory: $(Build.Repository.LocalPath)
    condition: always()

  # Create tarball of dependencies for artifact sharing
  - script: |
      set -e
      cd $(Build.Repository.LocalPath)

      # Create dependencies artifact
      if [ -d "staging" ]; then
        echo "Creating dependencies artifact..."
        tar -czf dependencies-$(vmImage).tar.gz staging/
        echo "Artifact size: $(du -sh dependencies-$(vmImage).tar.gz)"
      else
        echo "No staging directory found, creating empty artifact"
        mkdir -p staging
        tar -czf dependencies-$(vmImage).tar.gz staging/
      fi
    displayName: 'Create dependencies artifact'
    workingDirectory: $(Build.Repository.LocalPath)

  # Publish artifact for build jobs
  - task: PublishPipelineArtifact@1
    displayName: 'Publish dependencies artifact'
    inputs:
      targetPath: '$(Build.Repository.LocalPath)/dependencies-$(vmImage).tar.gz'
      artifactName: '$(artifactName)'

  # Debug information
  - script: |
      echo "=== System information ==="
      sw_vers
      echo "=== Disk usage ==="
      df -h /usr/local
      echo "=== Build variables ==="
      echo "vmImage: $(vmImage)"
      echo "artifactName: $(artifactName)"
      echo "Working directory: $(pwd)"
      echo "Staging area: $(ls -la staging/ 2>/dev/null || echo 'Not found')"
    displayName: 'Debug information'
    condition: always()