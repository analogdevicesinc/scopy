cmake_minimum_required(VERSION 3.9)

set(SCOPY_MODULE regmap)

message(STATUS "building plugin: " ${SCOPY_MODULE})

project(scopy-${SCOPY_MODULE} VERSION 0.1 LANGUAGES CXX)

include(GenerateExportHeader)

# TODO: split stylesheet/resources and add here
# TODO: export header files correctly

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/ui)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)

set(SCOPY_QT_COMPONENTS Widgets Xml Test)

FILE(GLOB SRC_LIST  src/*.cpp src/*.cc src/*.hpp
    src/register/*.cpp src/register/*.hpp
    src/register/bitfield/*.cpp src/register/bitfield/*.hpp
    src/readwrite/*.cpp src/readwrite/*.hpp
    src/recycerview/*.cpp src/recycerview/*.hpp)
FILE(GLOB HEADER_LIST include/${SCOPY_MODULE}/*.h include/${SCOPY_MODULE}/*.hpp)
FILE(GLOB UI_LIST ui/*.ui)

if(ENABLE_TESTING)
    add_subdirectory(test)
endif()

set(PROJECT_SOURCES
    ${SRC_LIST}
    ${HEADER_LIST}
    ${UI_LIST}
)

find_package(Qt${QT_VERSION_MAJOR} COMPONENTS ${SCOPY_QT_COMPONENTS} REQUIRED)

find_package(libm2k REQUIRED)
if(NOT "${SCOPY_PLUGIN_INSTALL_PATH}" STREQUAL "")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${SCOPY_PLUGIN_INSTALL_PATH})
endif()

add_library(${PROJECT_NAME} SHARED
    ${PROJECT_SOURCES}
)

generate_export_header(${PROJECT_NAME} EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/${SCOPY_MODULE}/${PROJECT_NAME}_export.h)

target_include_directories(${PROJECT_NAME} INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/${SCOPY_MODULE})

foreach(comp ${SCOPY_QT_COMPONENTS})
    set(SCOPY_QT_LIBRARIES ${SCOPY_QT_LIBRARIES} Qt${QT_VERSION_MAJOR}::${comp})
endforeach()

target_link_libraries(${PROJECT_NAME} PUBLIC
	${SCOPY_QT_LIBRARIES}
	scopy-pluginbase
	scopy-iioutil
	libm2k::libm2k)

set(PLUGIN_NAME ${PROJECT_NAME} PARENT_SCOPE)

install(TARGETS ${PROJECT_NAME}
    RUNTIME
    DESTINATION ${SCOPY_PLUGIN_INSTALL_DIR})

