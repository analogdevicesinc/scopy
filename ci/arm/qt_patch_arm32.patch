--- qt-everywhere-src2/qtbase/mkspecs/devices/linux-rasp-pi3-vc4-g++/qmake.conf	2024-11-08 15:36:08.000000000 +0200
+++ qt-everywhere-src/qtbase/mkspecs/devices/linux-rasp-pi3-vc4-g++/qmake.conf	2025-03-05 17:50:14.627810328 +0200
@@ -31,7 +31,7 @@
 QMAKE_LIBS_EGL         += -lEGL
 QMAKE_LIBS_OPENGL_ES2  += -lGLESv2 -lEGL
 
-QMAKE_CFLAGS            = -march=armv8-a -mtune=cortex-a53 -mfpu=crypto-neon-fp-armv8
+QMAKE_CFLAGS            = -march=armv7-a -mfloat-abi=hard -mfpu=neon -mno-unaligned-access
 QMAKE_CXXFLAGS          = $$QMAKE_CFLAGS
 
 DISTRO_OPTS            += hard-float
--- qt-everywhere-src2/qtbase/src/3rdparty/angle/include/EGL/eglplatform.h
+++ qt-everywhere-src/qtbase/src/3rdparty/angle/include/EGL/eglplatform.h
@@ -141,6 +141,7 @@
  */
 typedef khronos_int32_t EGLint;
 
+typedef uint32_t DISPMANX_ELEMENT_HANDLE_T;
 
 /* C++ / C typecast macros for special EGL handle values */
 #if defined(__cplusplus)
--- new/qt-everywhere-src-5.15.2/qtbase/src/gui/configure.json
+++ qt-everywhere-src-5.15.2/qtbase/src/gui/configure.json
@@ -862,7 +862,10 @@
             "type": "compile",
             "test": {
                 "include": [ "EGL/egl.h", "bcm_host.h" ],
-                "main": "vc_dispmanx_display_open(0);"
+                "main": [
+                    "vc_dispmanx_display_open(0);",
+                    "EGL_DISPMANX_WINDOW_T *eglWindow = new EGL_DISPMANX_WINDOW_T;"
+                ]
             },
             "use": "egl bcm_host"
         },
--- qt-everywhere-src2/qtbase/src/plugins/platforms/eglfs/deviceintegration/eglfs_brcm/qeglfsbrcmintegration.cpp
+++ qt-everywhere-src/qtbase/src/plugins/platforms/eglfs/deviceintegration/eglfs_brcm/qeglfsbrcmintegration.cpp
@@ -44,6 +44,12 @@
 
 static DISPMANX_DISPLAY_HANDLE_T dispman_display = 0;
 
+typedef struct {
+  DISPMANX_ELEMENT_HANDLE_T element;
+  int width;   /* This is necessary because dispmanx elements are not queriable. */
+  int height;
+} EGL_DISPMANX_WINDOW_T;
+
 static EGLNativeWindowType createDispmanxLayer(const QPoint &pos, const QSize &size, int z, DISPMANX_FLAGS_ALPHA_T flags)
 {
     VC_RECT_T dst_rect;
@@ -76,12 +82,12 @@
     eglWindow->width = size.width();
     eglWindow->height = size.height();
 
-    return eglWindow;
+    return (EGLNativeWindowType)eglWindow;
 }
 
 static void destroyDispmanxLayer(EGLNativeWindowType window)
 {
-    EGL_DISPMANX_WINDOW_T *eglWindow = static_cast<EGL_DISPMANX_WINDOW_T *>(window);
+    EGL_DISPMANX_WINDOW_T *eglWindow = (EGL_DISPMANX_WINDOW_T*)(window);
     DISPMANX_UPDATE_HANDLE_T dispman_update = vc_dispmanx_update_start(0);
     vc_dispmanx_element_remove(dispman_update, eglWindow->element);
     vc_dispmanx_update_submit_sync(dispman_update);